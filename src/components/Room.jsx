/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import { Color, DoubleSide, MeshBasicMaterial, MeshPhysicalMaterial, MeshStandardMaterial, RepeatWrapping, Vector2, sRGBEncoding } from "three";

export default function Room({ ...props }) {
  const { nodes, materials } = useGLTF("/room-transformed.glb");
  const group = useRef();
  const innerWalls = useRef();
  const outerWalls = useRef();
  const ceiling = useRef();
  const floor = useRef();

  useEffect(() => {
    innerWalls.current.geometry.attributes.uv2 = innerWalls.current.geometry.attributes.uv;
    outerWalls.current.geometry.attributes.uv2 = outerWalls.current.geometry.attributes.uv;
    ceiling.current.geometry.attributes.uv2 = ceiling.current.geometry.attributes.uv;
    floor.current.geometry.attributes.uv2 = floor.current.geometry.attributes.uv;
  }, []);

  //OUTERWALLS
  const colorOuter = useTexture("/textures/walls/material/color.jpg");
  colorOuter.repeat.set(15, 15);
  colorOuter.flipY = false;
  colorOuter.wrapS = RepeatWrapping;
  colorOuter.wrapT = RepeatWrapping;

  const roughnessOuter = useTexture("/textures/walls/material/roughness.jpg");
  roughnessOuter.repeat.set(15, 15);
  roughnessOuter.flipY = false;
  roughnessOuter.wrapS = RepeatWrapping;
  roughnessOuter.wrapT = RepeatWrapping;

  const normalOuter = useTexture("/textures/walls/material/normal.jpg");
  normalOuter.repeat.set(15, 15);
  normalOuter.flipY = false;
  normalOuter.wrapS = RepeatWrapping;
  normalOuter.wrapT = RepeatWrapping;

  const aoOuter = useTexture("/textures/walls/material/ao.jpg");
  aoOuter.repeat.set(15, 15);
  aoOuter.flipY = false;
  aoOuter.wrapS = RepeatWrapping;
  aoOuter.wrapT = RepeatWrapping;

  const outerWallsMaterial = new MeshStandardMaterial();
  outerWallsMaterial.map = colorOuter;
  outerWallsMaterial.normalMap = normalOuter;
  outerWallsMaterial.normalScale = new Vector2(4, 4);
  outerWallsMaterial.roughnessMap = roughnessOuter;
  outerWallsMaterial.aoMap = aoOuter;
  outerWallsMaterial.aoMapIntensity = 0.5;

  //CEILING
  const lightmapCeiling = useTexture("/textures/ceiling/bakes/LM.jpg");
  lightmapCeiling.encoding = sRGBEncoding;
  lightmapCeiling.flipY = false;

  const ceilingMaterial = new MeshStandardMaterial();
  ceilingMaterial.lightMap = lightmapCeiling;
  ceilingMaterial.lightMapIntensity = 100;
  ceilingMaterial.envMapIntensity = 0;

  //INNERWALS
  const lightMapWalls = useTexture("/textures/walls/bakes/LM.jpg");
  lightMapWalls.encoding = sRGBEncoding;
  lightMapWalls.flipY = false;

  const innerWallsMaterial = new MeshStandardMaterial();
  innerWallsMaterial.lightMap = lightMapWalls;
  innerWallsMaterial.lightMapIntensity = 100;
  innerWallsMaterial.envMapIntensity = 0;

  //FLOOR
  const color = useTexture("/textures/floor/material/color.jpg");
  color.repeat.set(6, 6);
  color.encoding = sRGBEncoding;
  color.flipY = false;
  color.wrapS = RepeatWrapping;
  color.wrapT = RepeatWrapping;

  const ao = useTexture("/textures/floor/material/ao.jpg");
  ao.repeat.set(6, 6);
  ao.encoding = sRGBEncoding;
  ao.flipY = false;
  ao.wrapS = RepeatWrapping;
  ao.wrapT = RepeatWrapping;

  const normal = useTexture("/textures/floor/material/normal.jpg");
  normal.repeat.set(6, 6);
  normal.encoding = sRGBEncoding;
  normal.flipY = false;
  normal.wrapS = RepeatWrapping;
  normal.wrapT = RepeatWrapping;

  const roughness = useTexture("/textures/floor/material/roughness.jpg");
  roughness.repeat.set(6, 6);
  roughness.encoding = sRGBEncoding;
  roughness.flipY = false;
  roughness.wrapS = RepeatWrapping;
  roughness.wrapT = RepeatWrapping;

  const lightMap = useTexture("/textures/floor/bakes/LM.jpg");
  lightMap.encoding = sRGBEncoding;
  lightMap.flipY = false;

  const floorMaterial = materials["Material.003"];
  floorMaterial.envMapIntensity = 0;
  floorMaterial.map = color;
  floorMaterial.normalMap = normal;
  floorMaterial.roughnessMap = roughness;
  floorMaterial.lightMap = lightMap;
  floorMaterial.lightMapIntensity = 50;

  //WINDOW
  const lightMapWindow = useTexture("/textures/windows/bakes/LM.jpg");
  lightMapWindow.encoding = sRGBEncoding;
  lightMapWindow.flipY = false;

  const windowFrameMaterial = materials.Windowframe;
  windowFrameMaterial.side = DoubleSide;
  windowFrameMaterial.lightMap = lightMapWindow;
  windowFrameMaterial.lightMapIntensity = 100;

  const windowGlassMaterial = new MeshPhysicalMaterial({
    metalness: 0,
    roughness: 0,
    envMapIntensity: 1,
    transparent: true,
    transmission: 1,
    opacity: 0.5,
  });

  //GARDEN
  const colorGarden = useTexture("/textures/garden/material/color.jpg");
  colorGarden.repeat.set(0.65, 0.5);
  // colorGarden.encoding = sRGBEncoding;
  colorGarden.flipY = false;
  colorGarden.wrapS = RepeatWrapping;
  colorGarden.wrapT = RepeatWrapping;

  const aoGarden = useTexture("/textures/garden/material/ao.jpg");
  // colorGarden.encoding = sRGBEncoding;
  aoGarden.repeat.set(0.65, 0.5);
  aoGarden.flipY = false;
  aoGarden.wrapS = RepeatWrapping;
  aoGarden.wrapT = RepeatWrapping;

  const normalGarden = useTexture("/textures/garden/material/normal.jpg");
  // normalGarden.encoding = sRGBEncoding;
  normalGarden.repeat.set(0.65, 0.5);
  normalGarden.flipY = false;
  normalGarden.wrapS = RepeatWrapping;
  normalGarden.wrapT = RepeatWrapping;

  const roughnessGarden = useTexture("/textures/garden/material/roughness.jpg");
  // roughnessGarden.encoding = sRGBEncoding;
  roughnessGarden.repeat.set(0.65, 0.5);
  roughnessGarden.flipY = false;
  roughnessGarden.wrapS = RepeatWrapping;
  roughnessGarden.wrapT = RepeatWrapping;

  const gardenMaterial = new MeshStandardMaterial();
  gardenMaterial.map = colorGarden;
  gardenMaterial.normalMap = normalGarden;
  gardenMaterial.normalScale = new Vector2(4, 4);
  gardenMaterial.aoMap = aoGarden;
  gardenMaterial.aoMapIntensity = 1;
  gardenMaterial.roughnessMap = roughnessGarden;
  // gardenMaterial.roughness = 1.1;
  gardenMaterial.envMapIntensity = 1.5;
  // gardenMaterial.color = new Color("#1672bd");

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh geometry={nodes.Base.geometry} material={materials["Material.002"]} position={[0, -0.003441, 0]} />
      <mesh ref={floor} geometry={nodes.Floor.geometry} material={materials["Material.003"]} position={[0, -0.003441, 0]} />
      <mesh ref={ceiling} geometry={nodes.Ceiling.geometry} material={ceilingMaterial} position={[0, 2.956559, 0]} />
      <mesh ref={outerWalls} geometry={nodes.OuterWalls.geometry} material={outerWallsMaterial} position={[-2.9, 1.595, 0]} />
      <mesh ref={innerWalls} geometry={nodes.InnerWalls.geometry} material={innerWallsMaterial} position={[3, 1.111622, 0.965227]} />
      <mesh geometry={nodes.Window.geometry} material={windowFrameMaterial} position={[-2.9, 1.6, 0]} />
      <mesh geometry={nodes.WindowGlass.geometry} material={windowGlassMaterial} position={[-2.9, 1.6, 0]} />
      <mesh geometry={nodes.GardenFloor.geometry} material={gardenMaterial} position={[3, 0, 6]} />
    </group>
  );
}

useGLTF.preload("/room-transformed.glb");
