/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import { MeshBasicMaterial, MeshStandardMaterial, RepeatWrapping, Vector2, sRGBEncoding } from "three";

export default function Room({ ...props }) {
  const { nodes, materials } = useGLTF("/room-transformed.glb");
  const group = useRef();
  const innerWalls = useRef();
  const outerWalls = useRef();
  const ceiling = useRef();
  const floor = useRef();

  useEffect(() => {
    innerWalls.current.geometry.attributes.uv2 = innerWalls.current.geometry.attributes.uv;
    outerWalls.current.geometry.attributes.uv2 = outerWalls.current.geometry.attributes.uv;
    ceiling.current.geometry.attributes.uv2 = ceiling.current.geometry.attributes.uv;
    floor.current.geometry.attributes.uv2 = floor.current.geometry.attributes.uv;
  }, []);

  // const AOWalls = useTexture("/AOWalls.jpg");
  // AOWalls.encoding = sRGBEncoding;
  // AOWalls.flipY = false;

  // const wallsMaterial = materials["Material.002"];
  // wallsMaterial.aoMap = AOWalls;
  // wallsMaterial.aoMapIntensity = 0.4;

  //CEILING
  const lightmapCeiling = useTexture("/textures/ceiling/bakes/LM.jpg");
  lightmapCeiling.encoding = sRGBEncoding;
  lightmapCeiling.flipY = false;

  const ceilingMaterial = new MeshStandardMaterial();
  ceilingMaterial.lightMap = lightmapCeiling;
  ceilingMaterial.lightMapIntensity = 100;

  //INNERWALS
  const lightMapWalls = useTexture("/textures/walls/bakes/LM.jpg");
  lightMapWalls.encoding = sRGBEncoding;
  lightMapWalls.flipY = false;

  const innerWallsMaterial = new MeshStandardMaterial();
  innerWallsMaterial.lightMap = lightMapWalls;
  innerWallsMaterial.lightMapIntensity = 100;

  //FLOOR
  const color = useTexture("/textures/floor/material/color.jpg");
  color.repeat.set(6, 6);
  color.encoding = sRGBEncoding;
  color.flipY = false;
  color.wrapS = RepeatWrapping;
  color.wrapT = RepeatWrapping;

  const ao = useTexture("/textures/floor/material/ao.jpg");
  ao.repeat.set(6, 6);
  ao.encoding = sRGBEncoding;
  ao.flipY = false;
  ao.wrapS = RepeatWrapping;
  ao.wrapT = RepeatWrapping;

  const normal = useTexture("/textures/floor/material/normal.jpg");
  normal.repeat.set(6, 6);
  normal.encoding = sRGBEncoding;
  normal.flipY = false;
  normal.wrapS = RepeatWrapping;
  normal.wrapT = RepeatWrapping;

  const roughness = useTexture("/textures/floor/material/roughness.jpg");
  roughness.repeat.set(6, 6);
  roughness.encoding = sRGBEncoding;
  roughness.flipY = false;
  roughness.wrapS = RepeatWrapping;
  roughness.wrapT = RepeatWrapping;

  const lightMap = useTexture("/textures/floor/bakes/LM.jpg");
  lightMap.encoding = sRGBEncoding;
  lightMap.flipY = false;

  const floorMaterial = materials["Material.003"];
  floorMaterial.map = color;
  // floorMaterial.aoMap = ao;
  floorMaterial.normalMap = normal;
  floorMaterial.roughnessMap = roughness;
  floorMaterial.lightMap = lightMap;
  floorMaterial.lightMapIntensity = 50;

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh ref={floor} geometry={nodes.Floor.geometry} material={materials["Material.003"]} position={[0, -0.003441, 0]} />
      <mesh ref={ceiling} geometry={nodes.Ceiling.geometry} material={ceilingMaterial} position={[0, 2.956559, 0]} />
      <mesh ref={outerWalls} geometry={nodes.OuterWalls.geometry} material={nodes.OuterWalls.material} position={[-2.9, 1.6, 0]} />
      <mesh ref={innerWalls} geometry={nodes.InnerWalls.geometry} material={innerWallsMaterial} position={[3, 1.116622, 0.965227]} />
    </group>
  );
}

useGLTF.preload("/room-transformed.glb");
